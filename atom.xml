<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jonsen个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijonsen.github.io%7C%7Chttps://LiJonsen.github.io/"/>
  <updated>2017-10-27T12:31:43.494Z</updated>
  <id>https://lijonsen.github.io||https://LiJonsen.github.io/</id>
  
  <author>
    <name>JonsenLi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css中垂直水平居中的四种方式</title>
    <link href="https://lijonsen.github.io%7C%7Chttps://LiJonsen.github.io/2017/10/27/css%E4%B8%AD%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E5%85%AB%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://lijonsen.github.io||https://LiJonsen.github.io/2017/10/27/css中垂直水平居中的八种方式/</id>
    <published>2017-10-27T11:33:05.000Z</published>
    <updated>2017-10-27T12:31:43.494Z</updated>
    
    <content type="html"><![CDATA[<p>本章内容：使用css让元素垂直并水平自适应居中，该内容主要介绍四种常见的居中方式</p><p><img src="/img/cssCenter.jpg" alt="Alt text"></p><a id="more"></a><h4 id="一个盒子实现绝对定位居中"><a href="#一个盒子实现绝对定位居中" class="headerlink" title="一个盒子实现绝对定位居中"></a>一个盒子实现绝对定位居中</h4><p>1、IE8-IE10及其他游览器统一支持</p><p>2、必须声明高度</p><p>3、在不使用box-sizing的情况下，不论是否设置padding都可居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">margin</span>:auto;</div><div class="line">  <span class="attribute">position</span>:absolute;</div><div class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="让子盒子在父容器内容居中"><a href="#让子盒子在父容器内容居中" class="headerlink" title="让子盒子在父容器内容居中"></a>让子盒子在父容器内容居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">          <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">          <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">          <span class="attribute">background</span>: green;</div><div class="line">          <span class="attribute">position</span>: relative;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.son</span>&#123;</div><div class="line">          <span class="attribute">position</span>: absolute;</div><div class="line">          <span class="attribute">margin</span>:auto;</div><div class="line">          <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">          <span class="attribute">height</span>: <span class="number">20%</span>;</div><div class="line">          <span class="attribute">background</span>: pink;</div><div class="line">          <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">          <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">          <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">          <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">      &#125;</div></pre></td></tr></table></figure><h4 id="使用transform位移居中"><a href="#使用transform位移居中" class="headerlink" title="使用transform位移居中"></a>使用transform位移居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-class">.box</span> &#123;  </div><div class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line"><span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line"><span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line"><span class="attribute">position</span>: relative;</div><div class="line">&#125;  </div><div class="line"><span class="selector-class">.son</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: pink;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="使用display-flex-弹性布局实现居中"><a href="#使用display-flex-弹性布局实现居中" class="headerlink" title="使用display:flex;弹性布局实现居中"></a>使用display:flex;弹性布局实现居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;  </div><div class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line"><span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line"><span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line"><span class="attribute">display</span>: flex;</div><div class="line"><span class="attribute">justify-content</span>: center;</div><div class="line"><span class="attribute">align-items</span>:center;</div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="selector-class">.son</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: pink;</div><div class="line">  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章内容：使用css让元素垂直并水平自适应居中，该内容主要介绍四种常见的居中方式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/cssCenter.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记</title>
    <link href="https://lijonsen.github.io%7C%7Chttps://LiJonsen.github.io/2017/10/21/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lijonsen.github.io||https://LiJonsen.github.io/2017/10/21/ES6学习笔记/</id>
    <published>2017-10-21T12:33:41.000Z</published>
    <updated>2017-10-27T10:35:55.196Z</updated>
    
    <content type="html"><![CDATA[<h4 id="新增let和const变量声明以及do表达式"><a href="#新增let和const变量声明以及do表达式" class="headerlink" title="新增let和const变量声明以及do表达式"></a>新增let和const变量声明以及do表达式</h4><h5 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h5><p>​        1、let声明的变量没有“变量提升”</p><p>​        2、使用let声明的变量，会产生代码块作用域，只有在作用域里才能使用该变量</p><p><img src="/img/es6.jpg" alt="Alt text"></p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//例如：</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">      <span class="built_in">console</span>.log(i);<span class="comment">//只能在for循环里面使用let声明的i变量</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i);<span class="comment">//这时i已经超出了作用域，报错</span></div></pre></td></tr></table></figure><p>​        3、循环例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面的i是用let声明的，当前的i只在本轮循环有效</span></div><div class="line"></div><div class="line"><span class="comment">//怎么知道上一轮循环的值？</span></div><div class="line"><span class="comment">//这时因为js引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础和上进行运算</span></div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></div></pre></td></tr></table></figure><p>​        4、for循环特点：设置循环变量的那部分是一个父作用域，而循环内部是一个单独的子作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// abc</span></div><div class="line"><span class="comment">// abc</span></div><div class="line"><span class="comment">// abc</span></div></pre></td></tr></table></figure><p>​        5、ES6明确规定，如果区块中存在let和const声明的变量，如果该变量在这之前使用过这些变量【同名】，就会报错，术语称为（ 暂时性死区    简称  TDZ ）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">let</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//报错ReferenceError：tmp is not defined</span></div></pre></td></tr></table></figure><p>​    </p><p>​        6、不允许重复声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> arg; <span class="comment">// 报错</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​    </p><p>​        7、允许块级作用域任意嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> &#123;&#123;&#123;&#123;</div><div class="line">  <span class="keyword">let</span> insane = <span class="string">'Hello World'</span>;</div><div class="line">  &#123;<span class="keyword">let</span> insane = <span class="string">'Hello min'</span>&#125;</div><div class="line">  <span class="built_in">console</span>.log(insane);<span class="comment">//Hello World</span></div><div class="line">&#125;&#125;&#125;&#125;;</div></pre></td></tr></table></figure><p>​        8、块级作用域替代自调用函数 (IIFE)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IIFE 写法</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tmp = ...;</div><div class="line">  ...</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// 块级作用域写法</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> tmp = ...;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​        9、块级作用域与函数声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 建议使用函数表达式</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="string">'secret'</span>;</div><div class="line">  <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h5><p>​        1、const声明一个只读常量，一旦声明常量的值就不会被改变</p><p>​        2、作用域与let相同，只在当前声明的作用域可以有效访问</p><p>​        3、const本质上保证的是声明变量指向的那个内存地址不得被改动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></div><div class="line">foo.prop = <span class="number">123</span>;</div><div class="line">foo.prop <span class="comment">// 123</span></div><div class="line"></div><div class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></div><div class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></div></pre></td></tr></table></figure><h5 id="ES6声明变量的六种方法"><a href="#ES6声明变量的六种方法" class="headerlink" title="ES6声明变量的六种方法"></a>ES6声明变量的六种方法</h5><p>1、    var</p><p>2、    function</p><p>3、    let</p><p>4、    const</p><p>5、    import</p><p>6、    class</p><h5 id="顶级对象属性"><a href="#顶级对象属性" class="headerlink" title="顶级对象属性"></a>顶级对象属性</h5><p>一、关于window顶级对象</p><p>​        1、在游览器环境中指window对象，在Node中指的是global对象</p><p>​        2、在ES5中，window顶级对象与全局变量挂钩。ES6为了改变这一点并保持兼容var和function声明依然是顶级对象的属性。另一方面规定，let、const、class声明的全局变量将不属于顶级对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">window</span>.a <span class="comment">// 1</span></div><div class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</div><div class="line"><span class="built_in">window</span>.b <span class="comment">// undefined</span></div></pre></td></tr></table></figure><h4 id="ES6变量使用技巧【变量的解构赋值】"><a href="#ES6变量使用技巧【变量的解构赋值】" class="headerlink" title="ES6变量使用技巧【变量的解构赋值】"></a>ES6变量使用技巧【变量的解构赋值】</h4><font color="red">从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）</font><h5 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h5><p>简单的对象解构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.因为对象的舒缓型没有次序，所以变量必须与属性同名</span></div><div class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">foo <span class="comment">// "aaa"</span></div><div class="line">bar <span class="comment">// "bbb"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">baz <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="comment">//2.如果</span></div></pre></td></tr></table></figure><p>将对象中的数据取出来并且重新声明一个变量存储对应的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将a键里的值:赋值给A变量</span></div><div class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:A,<span class="attr">b</span>:B,<span class="attr">c</span>:C&#125;=obj;</div></pre></td></tr></table></figure><p>在函数中返回多个值，使用解构将多个返回值接收。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> obj[key];</div><div class="line">      &#125;,</div><div class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>)</span>&#123;</div><div class="line">          obj[key] = val;</div><div class="line">      &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> &#123; get, set &#125; = fn();</div><div class="line">set(<span class="string">'fib'</span>, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>]);</div><div class="line"><span class="built_in">console</span>.log(get(<span class="string">'fib'</span>));</div></pre></td></tr></table></figure><p>将Math对象里的属性方法存在变量里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//1.将方法保存起来，</span></div><div class="line"><span class="keyword">let</span> &#123;PI,random&#125;=<span class="built_in">Math</span>;</div><div class="line"><span class="built_in">console</span>.log(PI,random()*<span class="number">10</span>);<span class="comment">//输出3.14159...和0-10随机数</span></div></pre></td></tr></table></figure><p>由于数组本身是特殊的对象，因此可以对数组进行对象属性的解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="comment">//1. ----&gt; 0:first表示数组第0个下标</span></div><div class="line"><span class="comment">//2. ----&gt; [arr.length-1]等于2:last,数组下标2的值为3</span></div><div class="line"><span class="keyword">let</span> &#123;<span class="number">0</span>:first,[arr.length<span class="number">-1</span>]:last&#125; = arr;</div><div class="line"><span class="built_in">console</span>.log(first);<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(last);<span class="comment">//3</span></div></pre></td></tr></table></figure><h5 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.add([x, y])表面上是一个数组，单在传入参数那一刻，数组参数就被解构成变量x和y</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></div></pre></td></tr></table></figure><h5 id="解构用途"><a href="#解构用途" class="headerlink" title="解构用途"></a>解构用途</h5><p>1、交换变量的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x =<span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> y =<span class="number">2</span>;</div><div class="line"><span class="comment">//将变量的值调换</span></div><div class="line">[x,y]=[y,x];</div></pre></td></tr></table></figure><p>2、接收函数返回多个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    foo: <span class="number">1</span>,</div><div class="line">    bar: <span class="number">2</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//接收对应属性名</span></div><div class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</div><div class="line"><span class="built_in">console</span>.log(foo+<span class="string">'---'</span>+bar);</div></pre></td></tr></table></figure><p>3、函数参数的定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数是一组有次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</div><div class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 参数是一组无次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</div><div class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</div></pre></td></tr></table></figure><p>4、提取json对象中的数据【重要】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.创建一个json数据</span></div><div class="line">       <span class="keyword">let</span> jsonData = &#123;</div><div class="line">           id:<span class="number">42</span>,</div><div class="line">           name:<span class="string">"jonsen"</span>,</div><div class="line">           age:<span class="number">20</span>,</div><div class="line">           gf:<span class="string">"limi"</span></div><div class="line">       &#125;</div><div class="line">       <span class="comment">//2.对相应的json键名进行解构</span></div><div class="line">       <span class="keyword">let</span> &#123;id,name,age,gf&#125; = jsonData;</div><div class="line"><span class="comment">//3.输出对应的json值</span></div><div class="line">       <span class="built_in">console</span>.log(id+<span class="string">"---"</span>+name+<span class="string">"---"</span>+age+<span class="string">"---"</span>+gf);</div></pre></td></tr></table></figure><p>5、遍历Map结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</div><div class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// first is hello</span></div><div class="line"><span class="comment">// second is world</span></div></pre></td></tr></table></figure><h5 id="新增字符串定义方法"><a href="#新增字符串定义方法" class="headerlink" title="新增字符串定义方法"></a>新增字符串定义方法</h5><p>特性1：支持换行，内部保留换行符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">`gasd</span></div><div class="line"><span class="string">asdasd`</span>;</div></pre></td></tr></table></figure><p>特性2：支持模字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在``中使用$&#123;表达式&#125;来运算</span></div><div class="line"><span class="keyword">var</span> mei = &#123;</div><div class="line">  name: <span class="string">'小美'</span>,</div><div class="line">  age: <span class="number">16</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> str = <span class="string">`<span class="subst">$&#123; mei.name &#125;</span>今年<span class="subst">$&#123; mei.age &#125;</span>了，</span></div><div class="line"><span class="string">  还有<span class="subst">$&#123; <span class="number">30</span> - mei.age &#125;</span>年他就30了`</span>;</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure><h5 id="运算符（…）"><a href="#运算符（…）" class="headerlink" title="运算符（…）"></a>运算符（…）</h5><p>作用：合并多个值为一个数组，或者解开数组（伪数组也支持）</p><p>1、使用apply和运算符（…）方法对数组进行解构，然后传递给Math.max方法取出最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">23</span>,<span class="number">1</span>,<span class="number">55</span>,<span class="number">23</span>,<span class="number">65465</span>,<span class="number">23</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(arr));<span class="comment">//max方法不接收数组，所以打印NaN</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr));<span class="comment">//使用apply来对arr数组进行解构（平铺）然后传递给max方法。</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...arr));<span class="comment">//使用es6中的...运算符对arr数组进行解构</span></div></pre></td></tr></table></figure><p>2、使用运算符（…）来对数组进行拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">let</span> allArr=[...arr,...arr2];</div></pre></td></tr></table></figure><p>3、使用运算符进行赋值解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">let</span> [a,b,...c] = arr;</div><div class="line"><span class="comment">//输出结果1,2,[3,4,5,6,7];</span></div></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>特点：</p><p>​    1、this固定指向上级this，它的this来自于上一级作用域，不再和调用方式有关</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">fn();<span class="comment">//该this指向window</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">fn</span>:fn&#125;;</div><div class="line">obj.fn();<span class="comment">//该this仍然指向window</span></div></pre></td></tr></table></figure><p>​    2、不能通过new来使用箭头函数，不能作为构造函数使用</p><p>​    3、不能使用arguments，可以使用运算符(…)来代替</p><p>1、如果函数只有一条语句，可以省略大括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ale = <span class="function"><span class="params">msg</span> =&gt;</span> alert(msg);</div><div class="line">ale(<span class="string">'执行函数体'</span>);</div></pre></td></tr></table></figure><p>2、如果函数体只有一句，且没有添加大括号，那么函数会自动return这条语句的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">10</span> *<span class="number">10</span>;</div><div class="line"><span class="built_in">console</span>.log(fn());<span class="comment">//100</span></div></pre></td></tr></table></figure><p>3、箭头函数this的指向例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//箭头函数this应用</span></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Tab</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">this</span>.btn = <span class="built_in">document</span>;</div><div class="line">          <span class="keyword">this</span>.target = <span class="built_in">document</span>.body;</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Tab.prototype=&#123;</div><div class="line">          bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">              <span class="comment">//1.没有使用箭头函数的情况下，点击后该this指向的是this.btn的值document</span></div><div class="line">              <span class="keyword">this</span>.btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">              &#125;</div><div class="line">              <span class="comment">//2.使用箭头函数后，this的指向不再发生改变，永远指向它的上一级this（Tab对象）</span></div><div class="line">              <span class="keyword">this</span>.btn.onclick=<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">new</span> Tab().bind();</div></pre></td></tr></table></figure><p>4、使用箭头函数应用在setTimeout或计时器里，解决计时器this默认指向window问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tab</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="keyword">this</span>.btn = <span class="built_in">document</span>;</div><div class="line">         <span class="keyword">this</span>.target = <span class="built_in">document</span>.body;</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line">     Tab.prototype=&#123;</div><div class="line">       </div><div class="line"></div><div class="line">         bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">             <span class="comment">//1.没有使用箭头函数的情况下，点击后该this指向的是this.btn的值document</span></div><div class="line">             <span class="keyword">this</span>.btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                 <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             <span class="comment">//2.使用箭头函数后，this的指向不再发生改变，永远指向它的上一级this（Tab对象）</span></div><div class="line">             <span class="keyword">this</span>.btn.onclick=<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">         &#125;,</div><div class="line"></div><div class="line"></div><div class="line">         <span class="comment">//按照ES5在原型里面添加方法时使用到计时器的时候，它的计时器默认指向window</span></div><div class="line">         f1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                 <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">             &#125;,<span class="number">1000</span>)</div><div class="line">          &#125;,</div><div class="line"></div><div class="line">         <span class="comment">//使用箭头函数限定它的this默认永远指向上一级</span></div><div class="line">         arrowFn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>) ,<span class="number">1000</span>);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="keyword">new</span> Tab().bind();<span class="comment">//当点击document时，显示Tab函数</span></div><div class="line"></div><div class="line">  </div><div class="line">      <span class="keyword">new</span> Tab().f1 (); <span class="comment">//指向Window</span></div><div class="line">      <span class="keyword">new</span> Tab().arrowFn (); <span class="comment">//指向Tab</span></div></pre></td></tr></table></figure><h4 id="ES6对象新特性"><a href="#ES6对象新特性" class="headerlink" title="ES6对象新特性"></a>ES6对象新特性</h4><p>特点：</p><p>​        1、只能配合new关键字创建实例</p><p>​        2、类名不会预解析</p><p>​        3、类原型上的属性名可以使用表达式</p><p>​        4、类原型上的实行默认是不可枚举的</p><p>实例成员：供实例使用的属性方法（实例成员由实例化的对象调用）</p><p>静态成员：供类使用的属性方法（静态成员由类调用）</p><p>1、对象内的方法定义可以简写，省去function关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'以前的写法'</span>);</div><div class="line">  &#125;,</div><div class="line">  fn2()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'ES6的写法'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、对象的key可以使用表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取一个input表单，value默认值为zhi        </span></div><div class="line">     <span class="keyword">let</span> input = <span class="built_in">document</span>.querySelector(<span class="string">'.text'</span>);</div><div class="line"><span class="comment">//获取点击按钮。通过点击该按钮显示obj对象</span></div><div class="line">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</div><div class="line"><span class="comment">//创建一个动态键</span></div><div class="line">        <span class="keyword">let</span> sum = <span class="string">'name'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> obj = &#123;</div><div class="line">          <span class="comment">//[sum]是动态的</span></div><div class="line">            [sum]:input.value</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(obj);<span class="comment">//输出&#123;name:zhi&#125;</span></div></pre></td></tr></table></figure><p>3、class 定义类的基本用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myCla</span></span>&#123;</div><div class="line">         <span class="keyword">constructor</span>(name,age,gender)&#123;</div><div class="line">             <span class="keyword">this</span>.name = name;</div><div class="line">             <span class="keyword">this</span>.age  = age;</div><div class="line">             <span class="keyword">this</span>.gender = gender;</div><div class="line">         &#125;;</div><div class="line"></div><div class="line">         say()&#123;</div><div class="line">             <span class="built_in">console</span>.log(<span class="string">`我的名字叫：<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>，我<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>岁了，我的性别是<span class="subst">$&#123;<span class="keyword">this</span>.gender&#125;</span>`</span>);</div><div class="line">         &#125;;</div><div class="line">  </div><div class="line">   <span class="comment">//定义一个静态方法，以工厂模式创建实例化</span></div><div class="line">         <span class="keyword">static</span> getMyCla(...arg)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> myCla(...arg);</div><div class="line">         &#125;</div><div class="line">  </div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">let</span> one = <span class="keyword">new</span> myCla(<span class="string">'jonsen'</span>,<span class="number">20</span>,<span class="string">'man'</span>);</div><div class="line">       one.say();</div><div class="line"><span class="comment">//使用静态成员，以工厂模式实例化对象</span></div><div class="line"><span class="keyword">let</span> two = myCla.getMyCla(<span class="string">'limi'</span>,<span class="number">18</span>,<span class="string">'gilr'</span>);</div><div class="line">           </div><div class="line">       two.say();</div></pre></td></tr></table></figure><p>4、class本质上还是function类型，里面定义的方法都加到原型里面，静态方法都定义在了自身</p><p>5、在继承父类的基础上，子类新增属于自己的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//定义一个父类</span></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">            <span class="keyword">constructor</span>(name,gender)&#123;</div><div class="line">                <span class="keyword">this</span>.name=name;</div><div class="line">                <span class="keyword">this</span>.gender=gender;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            run()&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'跑'</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">static</span> getMaxAge()&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">250</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line"><span class="comment">//1.继承上一个类的属性</span></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">            eat()&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'狗粮'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> one  = <span class="keyword">new</span> Dog(<span class="string">'二哈'</span>,<span class="string">'man'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`名字：<span class="subst">$&#123;one.name&#125;</span>,性别<span class="subst">$&#123;one.gender&#125;</span>`</span>)<span class="comment">//名字：二哈,性别man</span></div><div class="line">        one.run();<span class="comment">//跑</span></div><div class="line">        one.eat();<span class="comment">//狗粮</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//2.在继承的基础上继续添加新的属性</span></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">            <span class="comment">//如果继承子类拥有独特的属性，需要写构造器来添加</span></div><div class="line">            <span class="comment">//子类构造器必须调用super方法</span></div><div class="line">            <span class="keyword">constructor</span>(name,gender,price)&#123;</div><div class="line">                <span class="comment">//继承父类的属性值</span></div><div class="line">                <span class="keyword">super</span>(name,gender);</div><div class="line">                <span class="keyword">this</span>.price=price;</div><div class="line">            &#125;</div><div class="line">            skill()&#123;</div><div class="line">               <span class="keyword">return</span> <span class="string">'认真搞笑，低调冷炮'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> xm = <span class="keyword">new</span> Person(<span class="string">'小茗同学'</span>,<span class="string">'boy'</span>,<span class="string">'五块'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`名字：<span class="subst">$&#123;xm.name&#125;</span>,价格：<span class="subst">$&#123;xm.price&#125;</span>，<span class="subst">$&#123;xm.skill()&#125;</span>`</span>);<span class="comment">//名字：小茗同学,价格：五块，认真搞笑，低调冷炮</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;新增let和const变量声明以及do表达式&quot;&gt;&lt;a href=&quot;#新增let和const变量声明以及do表达式&quot; class=&quot;headerlink&quot; title=&quot;新增let和const变量声明以及do表达式&quot;&gt;&lt;/a&gt;新增let和const变量声明以及do表达式&lt;/h4&gt;&lt;h5 id=&quot;let命令&quot;&gt;&lt;a href=&quot;#let命令&quot; class=&quot;headerlink&quot; title=&quot;let命令&quot;&gt;&lt;/a&gt;let命令&lt;/h5&gt;&lt;p&gt;​        1、let声明的变量没有“变量提升”&lt;/p&gt;
&lt;p&gt;​        2、使用let声明的变量，会产生代码块作用域，只有在作用域里才能使用该变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/es6.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Hexo+next+github搭建个人博客</title>
    <link href="https://lijonsen.github.io%7C%7Chttps://LiJonsen.github.io/2017/10/15/%E4%BD%BF%E7%94%A8Hexo-next-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://lijonsen.github.io||https://LiJonsen.github.io/2017/10/15/使用Hexo-next-github搭建个人博客/</id>
    <published>2017-10-15T05:29:33.000Z</published>
    <updated>2017-10-21T14:15:10.698Z</updated>
    
    <content type="html"><![CDATA[<p>文章主要内容：使用Hexo + Next + github 搭建一个属于自己的个人博客</p><p><img src="/img/bg.jpg" alt="Alt text"></p><a id="more"></a><h4 id="环境搭建需求"><a href="#环境搭建需求" class="headerlink" title="环境搭建需求"></a>环境搭建需求</h4><p>​    ①拥有自己的github个人网页【例如我的：<a href="https://lijonsen.github.io】" target="_blank" rel="external">https://lijonsen.github.io】</a></p><p>​    ②搭建Hexo环境【前提是已经安装node.js和npm】</p><p>​    ③在Hexo基础上配置Next主题</p><p>​    ④如果需要个人域名，则在万网中购买一个，也可以使用github给用户配的<a href="https://username.github.io/" target="_blank" rel="external">https://username.github.io/</a></p><p>​    ⑤如果安装了git，也可以通过git Bash操作命令行</p><h4 id="在npm中安装Hexo环境"><a href="#在npm中安装Hexo环境" class="headerlink" title="在npm中安装Hexo环境"></a>在npm中安装Hexo环境</h4><p>​    ①打开cmd命令行下载Hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure><p>​    ②可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save //save前面两个杠</div></pre></td></tr></table></figure><p>​    ③完成之后重新打开cmd命令，查看Hexo是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo  -v</div></pre></td></tr></table></figure><p><img src="/img/hexo-done.jpg" alt="Alt text"></p><h4 id="Hexo的相关配置"><a href="#Hexo的相关配置" class="headerlink" title="Hexo的相关配置"></a>Hexo的相关配置</h4><font color="red">以下操作模拟在本地的E:\myBlog文件夹下操作</font><p>1、在E盘创建一个文件夹myBlog，在该文件夹初始化Hexo，打开git Bash或该目录的cmd。</p><p>输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo install</div></pre></td></tr></table></figure><p>​    </p><p>2、首体验Hexo，继续输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure><p>3、再次输入以下命令，成功后通过 <a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a>  访问Hexo生成的页面<font color="red">【注意事项：进去之后不能点击右上角× 直接退出，需要通过Ctrl + c 退出Hexo服务器才可以操作其他命令】</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">成功提示：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure><p><img src="/img/hexo-index.jpg" alt="Alt text"></p><p>​    </p><h4 id="将Hexo与Github连接起来"><a href="#将Hexo与Github连接起来" class="headerlink" title="将Hexo与Github连接起来"></a>将Hexo与Github连接起来</h4><p>​    <font color="red">注：下面会在Hexo环境下安装各种各样的小插件，插件的所有安装记录可在根目录package.json文件中查看，在配置【字段：值】得时候，字段后面必须有一个空格</font></p><p>​    1、安装拓展插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><p>​    2、配置秘钥，将秘钥放置Github中的SSH秘钥存储中</p><p>​            ①将路径切换到以下目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure><p>​            ②生成秘钥，连续三个回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;yourEmail@163.com&quot;</div></pre></td></tr></table></figure><p>​            ③添加秘钥到ssh-agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure><p>​            ④打开目录C:\Users\Admin\ .ssh\id_rsa.pub文件，全选赋值秘钥，拷贝到github新增的SSH秘钥中：</p><p><img src="/img/file.png" alt="Alt text"></p><p>​            ⑤到Github.com你的用户圆头像右上角，单击后出现列表，点击Settings（设置），找到如图选项：</p><p><img src="/img/ssh.jpg" alt="Alt text"></p><font color="red">注意：添加SSH秘钥时，title为空，否则添加秘钥失败。直接拷贝id_rsa.pub文件里的秘钥到key即可</font><p><img src="/img/newSSH.png" alt="Alt text">        </p><p>​            ⑥测试是否已经连接上，这里地址不需要更改，直接拷贝：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure><p>成功如图所示【<font color="red">文件目录在Hexo根目录</font>】：</p><p><img src="/img/hi.jpg" alt="Alt text"></p><p>​    </p><p>​        3、配置根目录的_config.yml文件,打开该文件按Ctrl+f搜索deploy，粘贴代码：</p><p>/<em>这里地址为你的github服务器的HTTPS地址</em>/</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line"></div><div class="line">type: git</div><div class="line"></div><div class="line">repository: https:<span class="comment">//github.com/username/UserName.github.io.git   </span></div><div class="line"></div><div class="line">branch: master</div></pre></td></tr></table></figure><p>​        4、新建一遍文章，文章将会以md格式存放到source\ _posts目录下，测试是否成功【如图所示】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post &quot;title name&quot;</div></pre></td></tr></table></figure><p><img src="/img/new-post.jpg" alt="Alt text"></p><p>​        查看根目录下的source\ _posts文件夹下已经创建好title-name.md，使用MarDown打开进行编写内容</p><p>​        5、编辑好之后执行生成、部署命令，该命令代替了git命令的push提交  【建议在本地通过hexo s -debug命令查看修改/更新的内容，确认配置完成再执行hexo d -g提交至github服务器端】：</p><p>第一种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、  hexo g  //生成</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2、hexo d//部署</div></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure><p>​        6、成功后访问<a href="https://yourgithub.github.io/" target="_blank" rel="external">https://yourgithub.github.io/</a></p><p>在服务器提交的过程中如果有出现很多<font color="red">warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX</font> 警告</p><p>解决办法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.autocrlf <span class="literal">false</span></div></pre></td></tr></table></figure><h4 id="配置主题Next"><a href="#配置主题Next" class="headerlink" title="配置主题Next"></a>配置主题Next</h4><p>提示：在配置过程中有两个配置文件</p><p>​    ①  位于Hexo根目录下的_config.yml【称为Hexo站点配置文件】</p><p>​    ②位于Next主题下的_config.yml配置文件【称为Next主题配置文件】</p><p>​        </p><p>​        1、在Hexo目录下的themes文件夹创建next文件夹用于存放Next主题，通过git Bash执行以下命令下载Next配置主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure><p>​        2、下载完成后，启用主题。打开Hexo的站点配置文件_config.yml，找到theme字段改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure><p>​        3、到这里主题已经安装完成了，下一步则要开始验证是否成功安装，首先执行以下命令将Hexo的缓存清一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure><p>​        4、通过-debug进入调试模式，启动Hexo本地站点，通过<font color="green"><a href="https://localhost:4000" target="_blank" rel="external">https://localhost:4000</a></font>访问主题。</p><font color="red">切记，进入Hexo服务器不要直接点右上角强制退出</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s -debug</div></pre></td></tr></table></figure><p>​        5、主题设定，进入主题Next的配置文件，打开搜索关键字Scheme，下面有四个主题布局，可以根据自己喜好来定制，直接把前面的#号去掉并把默认主题加上#号即可，想要在网页查看的话可以通过以下命令在本地调试：</p><p>1、先清除一下缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure><p>2、开启本地Hexo服务器的调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s -debug</div></pre></td></tr></table></figure><h4 id="添加sitemap和feed插件"><a href="#添加sitemap和feed插件" class="headerlink" title="添加sitemap和feed插件"></a>添加sitemap和feed插件</h4><p>​        1、在Hexo根目录输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed -save</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap -save</div></pre></td></tr></table></figure><p>​        2、修改Hexo站点配置文件_config.yml,在 #Extensions下面增加以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">Plugins:</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div><div class="line">#Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: <span class="number">20</span></div><div class="line">#sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div></pre></td></tr></table></figure><p>​        </p><p>​        3、执行部署github服务端命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure><p>成功提交后就可以访问自己的个人博客啦！</p><font color="green"><a href="https://username.github.io/" target="_blank" rel="external">https://username.github.io/</a></font><h4 id="修改Next主题的样式"><a href="#修改Next主题的样式" class="headerlink" title="修改Next主题的样式"></a>修改Next主题的样式</h4><p>​    </p><p>​    推介大家参考这个链接，里面有很多Next主题的功能配置教程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://segmentfault.com/a/1190000009544924</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章主要内容：使用Hexo + Next + github 搭建一个属于自己的个人博客&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/bg.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP中的cookie和session</title>
    <link href="https://lijonsen.github.io%7C%7Chttps://LiJonsen.github.io/2017/10/14/%E5%AE%9A%E4%BD%8D%E6%B7%B1%E5%9C%B3/"/>
    <id>https://lijonsen.github.io||https://LiJonsen.github.io/2017/10/14/定位深圳/</id>
    <published>2017-10-14T14:15:47.000Z</published>
    <updated>2017-10-21T12:32:36.514Z</updated>
    
    <content type="html"><![CDATA[<p>一、会话技术Cookie和Session =》http协议</p><p>​    1、Cookie是客户端数，服务器把每个用户的数据以cookie的形式写给用户各自的游览器。当用户使用游览器再去访问服务器中的web资源时，就会带着各自的数据去，这样web资源处理的就是用户各自的数据了</p><p>​    2、作用：</p><p>​            （1）保存上次登录时间等信息</p><p>​            （2）保存用户名、密码、在一定时间不用重新登录</p><p>​            （3）记录用户访问网站的喜好</p><p>​            （4）网站的个性化，比如定制网站的服务，内容</p><p>​            </p><p>​    3、cookie基本使用</p><p>​            （1）setCookie(“name”,”jiaosen”,”3600”);</p><p>​        说明：参数一和参数二是一个键值对</p><p>​                参数一：Cookie的键</p><p>​                参数二：Cookie的值</p><p>​                参数二：Cookie在客户端保存的时间【按秒计算】</p><p>​    4、详细说明：</p><p>​            （1）当游览器访问 cookie.php页面的时候，我们的服务器就会以一种特定的形式会送http响应，当游览器获取到信息后，就会保存该cookie到本机特定文件里</p><p>​            （2）如果没有事件【参数三】，cookie不会保存到客户端，当游览器的会话结束，我们的cookie就会失效</p><p>​            （3）cookie只能保存字符串</p><p>​            （4）如果重新访问创建cookie的那个页面，相当于把cookie的生命周期刷新了</p><p>​            （5）cookie也可以保存中文，默认对中文进行urldecode编码</p><p>​            （6）可以有多个cookie值，可以给不同的键值对，设置不同的有效时间</p><p>​            （7）客户端cookie值始终针对一个用户而言，与其他的用户的访问cookie值无关</p><p>​            （8）方案1：check_add.php头部：&lt;?php date_default_timezone_set(“PRC”);  ?&gt;  设置默认时区为北京时间。。解决当前页面。</p><p>方案2：在php.ini中设置date.timezone的值为PRC，设置好以后的为：date.timezone=PRC，同时取消这一行代码的注释，即去掉前面的分号就可以了。</p><p>​            （9）如果setcookie()没有写参数三，那么这个cookie值当游览器关闭的时候清除，并且不会存储在cookies会话存储文件里</p><p>​        5、如何更新Cookie信息</p><p>​            语法：setCookie();</p><p>​        6、删除Cookie信息</p><p>​                （1）指定删除</p><p>​                    //删除的时间是负数，只要是小于当前设置的时间就可以</p><p>​                    setCookie(“key”,””,time()-200);</p><p>​    setCookie(“name”,””,time()-200);</p><p>​                （2）全部删除</p><p>删除所有cookie值</p><p> foreach($_COOKIE as $key=&gt;$val){</p><p>​     setCookie($key,””,time()-200);</p><p>}</p><p>​            6、cookie弊端    </p><p>​                ①不安全，因为cookie是以明文的方式传输的</p><p>​                ②只能传输小型数据</p><p>​                ③在网络传数据带宽消耗的问题</p><p>二、session技术</p><p>​        1、session默认保存在C:/windows/temp文件目录下</p><p>​        2、设置session: </p><p>​                ①   初始化session_start();      设置$_SESSION[‘name’]=”jonsen”;    </p><p>​                ②保存的格式name|s:6:”jonsen”;  键–s数据类型–6数据大小–值</p><p>​                ③注意：key【键名不能重复】</p><p>​        3、获取session数据</p><p>​                ①   初始化session_start();      设置$name = $_SESSION[‘name’];</p><p>​                ②session文件中可以保存所有的数据类型【double,integer,bool,array,object】</p><p>​                ③如果取出对象，则需要先声明一下类的定义信息，如果是引入声明信息文件，则require_once在session_start(); 之前声明</p><p>​        4、更新session数据</p><p>​                ①    session_start();</p><p>​                        $_SESSION[‘name’]=”黎教森”;</p><pre><code>echo &quot;更新成功&quot;;</code></pre><p>​        5、删除session数据</p><p>​                ①删除某一个session数据</p><p>​                      session_start();//初始化session</p><p>​                       // unset()方法，删除/释放某一个变量</p><p>​                        unset($_SESSION[‘name’]);</p><p>​                ②删除所有session数据</p><p>​                   //这样会把当前这个游览器对应的session文件删除</p><pre><code>session_destroy();</code></pre><p>​                ③每个网站都有一个安全退出，如果没有按安全退出则当前用户的session数据会保留在客户端等待垃圾回收机制回收【php.ini文件下修改session.gc_maxlifetime = 1440 】，这样有可能会收到攻击。</p><p>​                ④如果没有手动删除，那么系统是怎么维护安全删除的</p><p>​                ⑤整个session文件是依赖于session_start();这条语句创建起来为这次会话服务，但是创建出来后默认是没有数据，为空的。</p><p>​                ⑥session_start();会去判断其他文件有没有创建会话，所有其他文件写有start并不会重新创建多一个文件会话</p><p>​                ⑦session文件当用户关闭游览器重新打开的时候会重新创建一个新的session文件服务这新一轮的会话</p><p>​                </p><p>​        6、session的细节讨论</p><p>​                ①session数据默认储存在时间为1440s(24分钟)，从~/php.ini中session.gc_maxlifetime = 1440 中配置修改</p><p>​                ②session文件存放的路径是可以修改的，在php.ini中session_save_path = “/tmp”,修改php.ini文件都要重启phpStudy才能生效</p><p>​    总结：cookie和session的主要区别</p><p>​        ① Cookie是把用户的数据写给用户的游览器</p><p>​        ②Session技术把用户的数据写到用户独占的$_SESSION中，存在服务器的某个路径的文件中</p><p>​        ③在使用$_SESSION前要保证session被初始化，具体方法有两种</p><p>​                1、先调用session_start();</p><p>​                2、配置php.ini文件下的session.auto_start=1（不推介，这样会影响该效率，因为每个文件都创建一个session会消耗内存）</p><p>​        ④当用户访问session文件创建会话的时候会自动生成一个Set-Cookie返回给游览器，蓝色高亮的字跟session文件保存目录下对应文件名，所以每当创建一次会话是session的文件名是对应这个Set-Cookie的名字来找到它的 </p><p>​    </p><p>注意：当用户禁用cookie后，服务器每次session_start()都会创建一个全新的session文件，后果就是无法让多个页面php，去共享同一份session文件</p><p>请问？如果客户端禁用cookie怎样实现session技术共享多个页面？</p><p>答：</p><p>​    （1）在每个超链接上添加一个PHPSISSIONID=sessionId;同时在每个页面加入  </p><p>​    if(isset($_GET[‘PHPSESSION’])){</p><p>​           session_id($_GET[‘PHPSESSION’]);</p><p>​            </p><p>​        }</p><p>​    （2）使用常亮SID</p><p>​    （3）直接配置php.ini文件的 session.use_trans_sid =0设为1（在href–action—header会自动加SID，打单室js的跳转不会自动加）</p><p>session技术的实际运用：</p><p>​    1、验证码</p><p>​            ①防止登录时，恶意攻击</p><p>​            ②防止灌水</p><p>​            ③如果没有验证码防护，则客户端可以通过for循环无限循环测试出用户名和密码，数据库也会被无限次请求</p><p>在php.ini文件中关于Cookie和Session的配置</p><p>​    ①      session的名字可以通过session.name() 来获取，可以在php.ini配置文件中修改</p><p>​    </p><p>​    ②三个一组：    session.gc_maxlifetime=1440//默认最大生命周期</p><p>​                session.gc_probability=1</p><p>​                session.gc_divisor=1000</p><p>​        说明：上面三个配置共同来确定session的垃圾回收机制，gc_probability=1 和gc_divisor=1000的含义就是有1000份之一调用垃圾回收机制，也就是说，如果有一千个人访问该网页，那么一定会调用一次垃圾回收机制</p><p>​    ③自定义会话处理器</p><p>​            问题：为什么session文件打头是sess_*,能不能自己定义文件名？</p><p>​            问题：能不能把session信息高效的保存到memcache【缓存】中</p><p>​            说明：可以通过session_set_save_handler操作和设置自定义会话处理，并且需要在php.ini中配置session.save_handler=[files\user]</p><p>​    总结：session数据可以存放的位置</p><p>​        ①文件</p><p>​        ②数据库【不推荐】</p><p>​        ③内存（memcache）</p><p>​        ④网络文件nfs技术  //把session存放到网络系统</p><p>session和cookie的对比</p><p>​        ①存在的位置。cookie保存在客户端，session保存在服务器的文件系统/memcache/数据库/网络文件nfs</p><p>​        ②安全性。比较而言cookie的安全性比session要弱</p><p>​        ③网络传输量。cookie通过网络在客户端与服务器端传输，而session保存在服务器端，不需要传输</p><p>​        ④生命周期（20分钟为例）</p><p>​            （1）cookie的生命周期是累积的，从创建时就开始计时，20分钟后cookie生命周期结束，cookie无效</p><p>​            （2）session的生命周期是间隔的，从创建时，开始计时如在20分钟，没有访问过session,那么session信息无效，如果在20分钟内，比如第19分钟时访问过session，那么它的生命周期将重新开始计算</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、会话技术Cookie和Session =》http协议&lt;/p&gt;
&lt;p&gt;​    1、Cookie是客户端数，服务器把每个用户的数据以cookie的形式写给用户各自的游览器。当用户使用游览器再去访问服务器中的web资源时，就会带着各自的数据去，这样web资源处理的就是用户
      
    
    </summary>
    
    
  </entry>
  
</feed>
