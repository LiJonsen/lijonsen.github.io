<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PHP中的cookie和session]]></title>
    <url>%2F2017%2F10%2F14%2F%E5%AE%9A%E4%BD%8D%E6%B7%B1%E5%9C%B3%2F</url>
    <content type="text"><![CDATA[一、会话技术Cookie和Session =》http协议 ​ 1、Cookie是客户端数，服务器把每个用户的数据以cookie的形式写给用户各自的游览器。当用户使用游览器再去访问服务器中的web资源时，就会带着各自的数据去，这样web资源处理的就是用户各自的数据了 ​ 2、作用： ​ （1）保存上次登录时间等信息 ​ （2）保存用户名、密码、在一定时间不用重新登录 ​ （3）记录用户访问网站的喜好 ​ （4）网站的个性化，比如定制网站的服务，内容 ​ ​ 3、cookie基本使用 ​ （1）setCookie(“name”,”jiaosen”,”3600”); ​ 说明：参数一和参数二是一个键值对 ​ 参数一：Cookie的键 ​ 参数二：Cookie的值 ​ 参数二：Cookie在客户端保存的时间【按秒计算】 ​ 4、详细说明： ​ （1）当游览器访问 cookie.php页面的时候，我们的服务器就会以一种特定的形式会送http响应，当游览器获取到信息后，就会保存该cookie到本机特定文件里 ​ （2）如果没有事件【参数三】，cookie不会保存到客户端，当游览器的会话结束，我们的cookie就会失效 ​ （3）cookie只能保存字符串 ​ （4）如果重新访问创建cookie的那个页面，相当于把cookie的生命周期刷新了 ​ （5）cookie也可以保存中文，默认对中文进行urldecode编码 ​ （6）可以有多个cookie值，可以给不同的键值对，设置不同的有效时间 ​ （7）客户端cookie值始终针对一个用户而言，与其他的用户的访问cookie值无关 ​ （8）方案1：check_add.php头部：&lt;?php date_default_timezone_set(“PRC”); ?&gt; 设置默认时区为北京时间。。解决当前页面。 方案2：在php.ini中设置date.timezone的值为PRC，设置好以后的为：date.timezone=PRC，同时取消这一行代码的注释，即去掉前面的分号就可以了。 ​ （9）如果setcookie()没有写参数三，那么这个cookie值当游览器关闭的时候清除，并且不会存储在cookies会话存储文件里 ​ 5、如何更新Cookie信息 ​ 语法：setCookie(); ​ 6、删除Cookie信息 ​ （1）指定删除 ​ //删除的时间是负数，只要是小于当前设置的时间就可以 ​ setCookie(“key”,””,time()-200); ​ setCookie(“name”,””,time()-200); ​ （2）全部删除 删除所有cookie值 foreach($_COOKIE as $key=&gt;$val){ ​ setCookie($key,””,time()-200); } ​ 6、cookie弊端 ​ ①不安全，因为cookie是以明文的方式传输的 ​ ②只能传输小型数据 ​ ③在网络传数据带宽消耗的问题 二、session技术 ​ 1、session默认保存在C:/windows/temp文件目录下 ​ 2、设置session: ​ ① 初始化session_start(); 设置$_SESSION[‘name’]=”jonsen”; ​ ②保存的格式name|s:6:”jonsen”; 键–s数据类型–6数据大小–值 ​ ③注意：key【键名不能重复】 ​ 3、获取session数据 ​ ① 初始化session_start(); 设置$name = $_SESSION[‘name’]; ​ ②session文件中可以保存所有的数据类型【double,integer,bool,array,object】 ​ ③如果取出对象，则需要先声明一下类的定义信息，如果是引入声明信息文件，则require_once在session_start(); 之前声明 ​ 4、更新session数据 ​ ① session_start(); ​ $_SESSION[‘name’]=”黎教森”; echo &quot;更新成功&quot;; ​ 5、删除session数据 ​ ①删除某一个session数据 ​ session_start();//初始化session ​ // unset()方法，删除/释放某一个变量 ​ unset($_SESSION[‘name’]); ​ ②删除所有session数据 ​ //这样会把当前这个游览器对应的session文件删除 session_destroy(); ​ ③每个网站都有一个安全退出，如果没有按安全退出则当前用户的session数据会保留在客户端等待垃圾回收机制回收【php.ini文件下修改session.gc_maxlifetime = 1440 】，这样有可能会收到攻击。 ​ ④如果没有手动删除，那么系统是怎么维护安全删除的 ​ ⑤整个session文件是依赖于session_start();这条语句创建起来为这次会话服务，但是创建出来后默认是没有数据，为空的。 ​ ⑥session_start();会去判断其他文件有没有创建会话，所有其他文件写有start并不会重新创建多一个文件会话 ​ ⑦session文件当用户关闭游览器重新打开的时候会重新创建一个新的session文件服务这新一轮的会话 ​ ​ 6、session的细节讨论 ​ ①session数据默认储存在时间为1440s(24分钟)，从~/php.ini中session.gc_maxlifetime = 1440 中配置修改 ​ ②session文件存放的路径是可以修改的，在php.ini中session_save_path = “/tmp”,修改php.ini文件都要重启phpStudy才能生效 ​ 总结：cookie和session的主要区别 ​ ① Cookie是把用户的数据写给用户的游览器 ​ ②Session技术把用户的数据写到用户独占的$_SESSION中，存在服务器的某个路径的文件中 ​ ③在使用$_SESSION前要保证session被初始化，具体方法有两种 ​ 1、先调用session_start(); ​ 2、配置php.ini文件下的session.auto_start=1（不推介，这样会影响该效率，因为每个文件都创建一个session会消耗内存） ​ ④当用户访问session文件创建会话的时候会自动生成一个Set-Cookie返回给游览器，蓝色高亮的字跟session文件保存目录下对应文件名，所以每当创建一次会话是session的文件名是对应这个Set-Cookie的名字来找到它的 ​ 注意：当用户禁用cookie后，服务器每次session_start()都会创建一个全新的session文件，后果就是无法让多个页面php，去共享同一份session文件 请问？如果客户端禁用cookie怎样实现session技术共享多个页面？ 答： ​ （1）在每个超链接上添加一个PHPSISSIONID=sessionId;同时在每个页面加入 ​ if(isset($_GET[‘PHPSESSION’])){ ​ session_id($_GET[‘PHPSESSION’]); ​ ​ } ​ （2）使用常亮SID ​ （3）直接配置php.ini文件的 session.use_trans_sid =0设为1（在href–action—header会自动加SID，打单室js的跳转不会自动加） session技术的实际运用： ​ 1、验证码 ​ ①防止登录时，恶意攻击 ​ ②防止灌水 ​ ③如果没有验证码防护，则客户端可以通过for循环无限循环测试出用户名和密码，数据库也会被无限次请求 在php.ini文件中关于Cookie和Session的配置 ​ ① session的名字可以通过session.name() 来获取，可以在php.ini配置文件中修改 ​ ​ ②三个一组： session.gc_maxlifetime=1440//默认最大生命周期 ​ session.gc_probability=1 ​ session.gc_divisor=1000 ​ 说明：上面三个配置共同来确定session的垃圾回收机制，gc_probability=1 和gc_divisor=1000的含义就是有1000份之一调用垃圾回收机制，也就是说，如果有一千个人访问该网页，那么一定会调用一次垃圾回收机制 ​ ③自定义会话处理器 ​ 问题：为什么session文件打头是sess_*,能不能自己定义文件名？ ​ 问题：能不能把session信息高效的保存到memcache【缓存】中 ​ 说明：可以通过session_set_save_handler操作和设置自定义会话处理，并且需要在php.ini中配置session.save_handler=[files\user] ​ 总结：session数据可以存放的位置 ​ ①文件 ​ ②数据库【不推荐】 ​ ③内存（memcache） ​ ④网络文件nfs技术 //把session存放到网络系统 session和cookie的对比 ​ ①存在的位置。cookie保存在客户端，session保存在服务器的文件系统/memcache/数据库/网络文件nfs ​ ②安全性。比较而言cookie的安全性比session要弱 ​ ③网络传输量。cookie通过网络在客户端与服务器端传输，而session保存在服务器端，不需要传输 ​ ④生命周期（20分钟为例） ​ （1）cookie的生命周期是累积的，从创建时就开始计时，20分钟后cookie生命周期结束，cookie无效 ​ （2）session的生命周期是间隔的，从创建时，开始计时如在20分钟，没有访问过session,那么session信息无效，如果在20分钟内，比如第19分钟时访问过session，那么它的生命周期将重新开始计算]]></content>
      <categories>
        <category>PHP的Cookie和Session会话技术</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6学习笔记]]></title>
    <url>%2F2016%2F06%2F21%2FES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[新增let和const变量声明以及do表达式let命令​ 1、let声明的变量没有“变量提升” ​ 2、使用let声明的变量，会产生代码块作用域，只有在作用域里才能使用该变量 12345//例如： for(let i=0;i&lt;10;i++)&#123; console.log(i);//只能在for循环里面使用let声明的i变量 &#125;console.log(i);//这时i已经超出了作用域，报错 ​ 3、循环例子 1234567891011//下面的i是用let声明的，当前的i只在本轮循环有效//怎么知道上一轮循环的值？//这时因为js引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础和上进行运算var a = [];for (let i = 0; i &lt; 10; i++) &#123; a[i] = function () &#123; console.log(i); &#125;;&#125;a[6](); // 6 ​ 4、for循环特点：设置循环变量的那部分是一个父作用域，而循环内部是一个单独的子作用域 1234567for (let i = 0; i &lt; 3; i++) &#123; let i = 'abc'; console.log(i);&#125;// abc// abc// abc ​ 5、ES6明确规定，如果区块中存在let和const声明的变量，如果该变量在这之前使用过这些变量【同名】，就会报错，术语称为（ 暂时性死区 简称 TDZ ） 12345678var tmp = 123;if (true) &#123; tmp = 'abc'; // ReferenceError let tmp;&#125;//报错ReferenceError：tmp is not defined ​ ​ 6、不允许重复声明 123456789101112131415// 报错function func() &#123; let a = 10; var a = 1;&#125;// 报错function func() &#123; let a = 10; let a = 1;&#125;function func(arg) &#123; let arg; // 报错&#125; ​ ​ 7、允许块级作用域任意嵌套 12345 &#123;&#123;&#123;&#123; let insane = 'Hello World'; &#123;let insane = 'Hello min'&#125; console.log(insane);//Hello World&#125;&#125;&#125;&#125;; ​ 8、块级作用域替代自调用函数 (IIFE) 1234567891011// IIFE 写法(function () &#123; var tmp = ...; ...&#125;());// 块级作用域写法&#123; let tmp = ...; ...&#125; ​ 9、块级作用域与函数声明 1234567// 建议使用函数表达式&#123; let a = 'secret'; let f = function () &#123; return a; &#125;;&#125; const命令​ 1、const声明一个只读常量，一旦声明常量的值就不会被改变 ​ 2、作用域与let相同，只在当前声明的作用域可以有效访问 ​ 3、const本质上保证的是声明变量指向的那个内存地址不得被改动 12345678const foo = &#123;&#125;;// 为 foo 添加一个属性，可以成功foo.prop = 123;foo.prop // 123// 将 foo 指向另一个对象，就会报错foo = &#123;&#125;; // TypeError: "foo" is read-only ES6声明变量的六种方法1、 var 2、 function 3、 let 4、 const 5、 import 6、 class 顶级对象属性一、关于window顶级对象 ​ 1、在游览器环境中指window对象，在Node中指的是global对象 ​ 2、在ES5中，window顶级对象与全局变量挂钩。ES6为了改变这一点并保持兼容var和function声明依然是顶级对象的属性。另一方面规定，let、const、class声明的全局变量将不属于顶级对象的属性。 1234var a = 1;window.a // 1let b = 1;window.b // undefined ES6变量使用技巧【变量的解构赋值】从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring） 对象的解构赋值简单的对象解构赋值 123456789//1.因为对象的舒缓型没有次序，所以变量必须与属性同名let &#123; bar, foo &#125; = &#123; foo: "aaa", bar: "bbb" &#125;;foo // "aaa"bar // "bbb"let &#123; baz &#125; = &#123; foo: "aaa", bar: "bbb" &#125;;baz // undefined//2.如果 将对象中的数据取出来并且重新声明一个变量存储对应的值 123//将a键里的值:赋值给A变量let obj = &#123;a:1,b:2,c:3&#125;;let &#123;a:A,b:B,c:C&#125;=obj; 在函数中返回多个值，使用解构将多个返回值接收。 1234567891011121314 function fn() &#123; var obj = &#123;&#125;; return &#123; get: function(key)&#123; return obj[key]; &#125;, set: function(key, val)&#123; obj[key] = val; &#125; &#125;;&#125;let &#123; get, set &#125; = fn();set('fib', [1, 1, 2, 3, 5, 8, 13]);console.log(get('fib')); 将Math对象里的属性方法存在变量里 123 //1.将方法保存起来，let &#123;PI,random&#125;=Math;console.log(PI,random()*10);//输出3.14159...和0-10随机数 由于数组本身是特殊的对象，因此可以对数组进行对象属性的解构 123456let arr = [1,2,3];//1. ----&gt; 0:first表示数组第0个下标//2. ----&gt; [arr.length-1]等于2:last,数组下标2的值为3let &#123;0:first,[arr.length-1]:last&#125; = arr;console.log(first);//1console.log(last);//3 函数参数的解构赋值123456//1.add([x, y])表面上是一个数组，单在传入参数那一刻，数组参数就被解构成变量x和yfunction add([x, y])&#123; return x + y;&#125;add([1, 2]); // 3 解构用途1、交换变量的值 1234let x =1;let y =2;//将变量的值调换[x,y]=[y,x]; 2、接收函数返回多个值 12345678910function example() &#123; return &#123; foo: 1, bar: 2 &#125;;&#125;//接收对应属性名let &#123; foo, bar &#125; = example();console.log(foo+'---'+bar); 3、函数参数的定义 1234567// 参数是一组有次序的值function f([x, y, z]) &#123; ... &#125;f([1, 2, 3]);// 参数是一组无次序的值function f(&#123;x, y, z&#125;) &#123; ... &#125;f(&#123;z: 3, y: 2, x: 1&#125;); 4、提取json对象中的数据【重要】 1234567891011//1.创建一个json数据 let jsonData = &#123; id:42, name:"jonsen", age:20, gf:"limi" &#125; //2.对相应的json键名进行解构 let &#123;id,name,age,gf&#125; = jsonData; //3.输出对应的json值 console.log(id+"---"+name+"---"+age+"---"+gf); 5、遍历Map结构 123456789const map = new Map();map.set('first', 'hello');map.set('second', 'world');for (let [key, value] of map) &#123; console.log(key + " is " + value);&#125;// first is hello// second is world 新增字符串定义方法特性1：支持换行，内部保留换行符 12let str = `gasdasdasd`; 特性2：支持模字符串 12345678//在``中使用$&#123;表达式&#125;来运算var mei = &#123; name: '小美', age: 16&#125;;let str = `$&#123; mei.name &#125;今年$&#123; mei.age &#125;了， 还有$&#123; 30 - mei.age &#125;年他就30了`;console.log(str); 运算符（…）作用：合并多个值为一个数组，或者解开数组（伪数组也支持） 1、使用apply和运算符（…）方法对数组进行解构，然后传递给Math.max方法取出最大值 12345let arr = [23,1,55,23,65465,23];console.log(Math.max(arr));//max方法不接收数组，所以打印NaNconsole.log(Math.max.apply(null,arr));//使用apply来对arr数组进行解构（平铺）然后传递给max方法。 console.log(Math.max(...arr));//使用es6中的...运算符对arr数组进行解构 2、使用运算符（…）来对数组进行拼接 123let arr = [1,2,3];let arr2 = [4,5,7];let allArr=[...arr,...arr2]; 3、使用运算符进行赋值解构 123let arr = [1,2,3,4,5,6,7];let [a,b,...c] = arr;//输出结果1,2,[3,4,5,6,7]; 箭头函数特点： ​ 1、this固定指向上级this，它的this来自于上一级作用域，不再和调用方式有关 123456let fn = () =&gt; console.log(this);fn();//该this指向windowlet obj = &#123;fn:fn&#125;;obj.fn();//该this仍然指向window ​ 2、不能通过new来使用箭头函数，不能作为构造函数使用 ​ 3、不能使用arguments，可以使用运算符(…)来代替 1、如果函数只有一条语句，可以省略大括号 12let ale = msg =&gt; alert(msg);ale('执行函数体'); 2、如果函数体只有一句，且没有添加大括号，那么函数会自动return这条语句的结果 12let fn = () =&gt; 10 *10;console.log(fn());//100 3、箭头函数this的指向例子 123456789101112131415161718//箭头函数this应用 function Tab()&#123; this.btn = document; this.target = document.body; &#125; Tab.prototype=&#123; bind:function()&#123; //1.没有使用箭头函数的情况下，点击后该this指向的是this.btn的值document this.btn.onclick=function()&#123; console.log(this); &#125; //2.使用箭头函数后，this的指向不再发生改变，永远指向它的上一级this（Tab对象） this.btn.onclick=() =&gt; console.log(this); &#125; &#125; new Tab().bind(); 4、使用箭头函数应用在setTimeout或计时器里，解决计时器this默认指向window问题 12345678910111213141516171819202122232425262728293031323334353637383940function Tab()&#123; this.btn = document; this.target = document.body; &#125; Tab.prototype=&#123; bind:function()&#123; //1.没有使用箭头函数的情况下，点击后该this指向的是this.btn的值document this.btn.onclick=function()&#123; console.log(this); &#125; //2.使用箭头函数后，this的指向不再发生改变，永远指向它的上一级this（Tab对象） this.btn.onclick=() =&gt; console.log(this); &#125;, //按照ES5在原型里面添加方法时使用到计时器的时候，它的计时器默认指向window f1:function()&#123; setTimeout(function()&#123; console.log(this); &#125;,1000) &#125;, //使用箭头函数限定它的this默认永远指向上一级 arrowFn:function()&#123; setTimeout(() =&gt; console.log(this) ,1000); &#125; &#125; new Tab().bind();//当点击document时，显示Tab函数 new Tab().f1 (); //指向Window new Tab().arrowFn (); //指向Tab ES6对象新特性特点： ​ 1、只能配合new关键字创建实例 ​ 2、类名不会预解析 ​ 3、类原型上的属性名可以使用表达式 ​ 4、类原型上的实行默认是不可枚举的 ​ 不足： ​ 1、访问的属性不能是数字开头 ​ 2、不能使用变量 使用[ ]相当于点语法： ​ 1、可以使用数字 ​ 2、可以使用变量 ​ 3、可以使用字符串 1234567891011let obj = &#123;a:1,b:2,1:'a',2:'b'&#125;;let name = 'a';console.log(obj.1)//报错console.log(obj.name)//报错//使用[ ]来解构对象console.log(obj[name])//1name='b';console.log(obj[name])//2console.log(obj[1])//aconsole.log(obj[2])//b 实例成员：供实例使用的属性方法（实例成员由实例化的对象调用） 静态成员：供类使用的属性方法（静态成员由类调用） 1、对象内的方法定义可以简写，省去function关键字 12345678let obj = &#123; fn:function()&#123; console.log('以前的写法'); &#125;, fn2()&#123; console.log('ES6的写法'); &#125;&#125; 2、对象的key可以使用表达式 123456789101112//获取一个input表单，value默认值为zhi let input = document.querySelector('.text');//获取点击按钮。通过点击该按钮显示obj对象 let btn = document.querySelector('.btn');//创建一个动态键 let sum = 'name'; let obj = &#123; //[sum]是动态的 [sum]:input.value &#125; console.log(obj);//输出&#123;name:zhi&#125; 3、class 定义类的基本用法 123456789101112131415161718192021222324class myCla&#123; constructor(name,age,gender)&#123; this.name = name; this.age = age; this.gender = gender; &#125;; say()&#123; console.log(`我的名字叫：$&#123;this.name&#125;，我$&#123;this.age&#125;岁了，我的性别是$&#123;this.gender&#125;`); &#125;; //定义一个静态方法，以工厂模式创建实例化 static getMyCla(...arg)&#123; return new myCla(...arg); &#125; &#125; let one = new myCla('jonsen',20,'man'); one.say();//使用静态成员，以工厂模式实例化对象 let two = myCla.getMyCla('limi',18,'gilr'); two.say(); 4、class本质上还是function类型，里面定义的方法都加到原型里面，静态方法都定义在了自身 5、在继承父类的基础上，子类新增属于自己的属性 12345678910111213141516171819202122232425262728293031323334353637383940414243444546 //定义一个父类 class Animal&#123; constructor(name,gender)&#123; this.name=name; this.gender=gender; &#125; run()&#123; console.log('跑'); &#125; static getMaxAge()&#123; return 250; &#125; &#125;//1.继承上一个类的属性 class Dog extends Animal&#123; eat()&#123; console.log('狗粮'); &#125; &#125; let one = new Dog('二哈','man'); console.log(`名字：$&#123;one.name&#125;,性别$&#123;one.gender&#125;`)//名字：二哈,性别man one.run();//跑 one.eat();//狗粮//2.在继承的基础上继续添加新的属性 class Person extends Animal&#123; //如果继承子类拥有独特的属性，需要写构造器来添加 //子类构造器必须调用super方法 constructor(name,gender,price)&#123; //继承父类的属性值 super(name,gender); this.price=price; &#125; skill()&#123; return '认真搞笑，低调冷炮'; &#125; &#125; let xm = new Person('小茗同学','boy','五块'); console.log(`名字：$&#123;xm.name&#125;,价格：$&#123;xm.price&#125;，$&#123;xm.skill()&#125;`);//名字：小茗同学,价格：五块，认真搞笑，低调冷炮 数组方法1、find方法，遍历数组中的值，返回满足表达式的那个值 123let arr = [20,1,53,23];let a = arr.find(v=&gt;v&lt;5);console.log(a);//1 2、es5方法filter可以用来寻找多个符合条件的值，返回数组 123let arr = [42,231,2325,2231,23];let newarr = arr.filter(v=&gt;v%2===0);console.log(newarr); 3、findIndex方法，可以用来寻找第一个符合条件的值的下标 123let arr = [232,123,423,521,23];let newArr = arr.findIndex(v=&gt;v&lt;30);console.log(newArr);//23 4、fill方法重置数组中的值 123let arr = [23,123,2324,231,22];arr.fill(20,2,4);//表示从下标2开始到4结束，下标为4的值不改变console.log(arr);//[232,123,20,20,23] Object的ES6新方法1、Object.assign(对象,被拷贝对象),相当于将另一个对象里的所有属性 拷贝一份 1234567//该方法属于浅拷贝，只能拷贝第一次的对象let obj1 = &#123;a:1,b:2&#125;; let obj2 = &#123;c:3,d:4,e:5&#125;;let obj3 = &#123;s:3,f:23&#125;; //Object.assign(obj1,obj2);只拷贝一个Object.assign(obj1,obj2,obj3)//obj1拷贝多个 console.log(obj1); 2、es5就有Object.keys方法了，es6Object.values获取对象所有的value 12//相当于遍历obj1对象中的所有值，返回一个数组console.log(Object.values(obj1)); 3、Object.entries方法，作用：以二维数组的形式获取对象的key和value 4、获取对象原型方法Object.getPrototypeOf(对象名) 1Object.getPrototypeOf(obj); 5、Object.setPrototypeOf获取对象的原型 1Object.setPrototypeOf(obj&#123;a:10,b:20&#125;); ES6新增数据结构1、SET【新增的构造函数，可创建新的数据结构，就够类似于数组】 用处：不再需要自己判断数据重复，方便用于验证注册之类的用户数据 说明：SET的值是唯一的，不重复 1234567891011121314let numSet = new Set([1,2,3,4]); console.log(numSet); numSet.add('sum');//添加新的值 console.log(numSet); numSet.delete(1);//删除指定值 console.log(numSet); var res= numSet.has('sum');//判断是否存在某个值 console.log(res); numSet.clear(); console.log(numSet)//清空所有值 2、MAP是ES6新增的数据结构，类似于传统对象 ​ 特点：key可以是任意东西 3、Promise异步处理 12345678910111213141516171819202122232425262728function pmsTimeout(time,data)&#123; return new Promise(function(yes,no)&#123; setTimeout(function()&#123; yes(data); &#125;,time); &#125;); &#125; let input = document.querySelector('input'); let btn = document.querySelector('button'); btn.onclick=function()&#123; //1.使用Promise内置then方法异步获取yes返回的数据 // pmsTimeout(1000,input.value) // .then(function(data)&#123; // //``字符串解析IE不支持 // console.log(data+'input标签内容'); // &#125;) //2.使用ES7新增async方法实现异步处理 async function asyncFn()&#123; let data = await pmsTimeout(1000,input.value); console.log(`内容：$&#123;data&#125;`); &#125;; //调用async asyncFn(); &#125; ​ 4、for of语句是es6新增的循环语句，作用是用来遍历上诉组以及内置的伪数组结构中的值 1234&lt;li&gt;第1个li&lt;/li&gt; &lt;li&gt;第2个li&lt;/li&gt; &lt;li&gt;第3个li&lt;/li&gt; &lt;li&gt;第4个li&lt;/li&gt; 1234567891011121314151617//使用for of语句遍历数组 let arr = [11,22,33]; for(let v of arr)&#123; console.log(v); &#125; //使用querySelectorAll获取的是一个伪数组 let arr2 = [2,3,54,5]; let lis = document.querySelectorAll('li'); //for of语句同样可以操作伪数组 console.log(arr2.pop());//5 console.log(lis.pop());//lis.pop is not a function //遍历li标签 for(let li of lis)&#123; console.log(li); &#125;]]></content>
      <categories>
        <category>ES6入门</category>
      </categories>
      <tags>
        <tag>JavascriptES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css中垂直水平居中的四种方式]]></title>
    <url>%2F2015%2F10%2F27%2Fcss%E4%B8%AD%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E5%85%AB%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[本章内容：使用css让元素垂直并水平自适应居中，该内容主要介绍四种常见的居中方式 一个盒子实现绝对定位居中1、IE8-IE10及其他游览器统一支持 2、必须声明高度 3、在不使用box-sizing的情况下，不论是否设置padding都可居中 12345678.box&#123; margin:auto; position:absolute; left:0; top:0; right:0; bottom:0;&#125; 让子盒子在父容器内容居中123456789101112131415161718.box&#123; width: 500px; height: 500px; background: green; position: relative; &#125; .son&#123; position: absolute; margin:auto; width: 20%; height: 20%; background: pink; top: 0; left: 0; right: 0; bottom: 0; &#125; 使用transform位移居中1234567891011121314151617.box &#123; width: 400px;height: 400px;background: #000;margin:0 auto;position: relative;&#125; .son&#123; width: 100px; height: 100px; background: pink; position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%);&#125; 使用display:flex;弹性布局实现居中1234567891011121314151617.box &#123; width: 400px;height: 400px;background: #000;margin:0 auto;display: flex;justify-content: center;align-items:center;&#125; .son&#123; width: 100px; height: 100px; background: pink; &#125;]]></content>
      <categories>
        <category>CSS布局</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo+next+github搭建个人博客]]></title>
    <url>%2F2015%2F09%2F15%2F%E4%BD%BF%E7%94%A8Hexo-next-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[文章主要内容：使用Hexo + Next + github 搭建一个属于自己的个人博客 环境搭建需求​ ①拥有自己的github个人网页【例如我的：https://lijonsen.github.io】 ​ ②搭建Hexo环境【前提是已经安装node.js和npm】 ​ ③在Hexo基础上配置Next主题 ​ ④如果需要个人域名，则在万网中购买一个，也可以使用github给用户配的https://username.github.io/ ​ ⑤如果安装了git，也可以通过git Bash操作命令行 在npm中安装Hexo环境​ ①打开cmd命令行下载Hexo： 1npm install hexo-cli -g ​ ②可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入 1npm install hexo --save //save前面两个杠 ​ ③完成之后重新打开cmd命令，查看Hexo是否安装成功 1hexo -v Hexo的相关配置以下操作模拟在本地的E:\myBlog文件夹下操作 1、在E盘创建一个文件夹myBlog，在该文件夹初始化Hexo，打开git Bash或该目录的cmd。 输入以下命令： 1hexo init 1hexo install ​ 2、首体验Hexo，继续输入命令： 1hexo g 3、再次输入以下命令，成功后通过 http://0.0.0.0:4000 访问Hexo生成的页面【注意事项：进去之后不能点击右上角× 直接退出，需要通过Ctrl + c 退出Hexo服务器才可以操作其他命令】 1hexo s 1成功提示：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. ​ 将Hexo与Github连接起来​ 注：下面会在Hexo环境下安装各种各样的小插件，插件的所有安装记录可在根目录package.json文件中查看，在配置【字段：值】得时候，字段后面必须有一个空格 ​ 1、安装拓展插件 1npm install hexo-deployer-git --save ​ 2、配置秘钥，将秘钥放置Github中的SSH秘钥存储中 ​ ①将路径切换到以下目录 1cd ~/.ssh ​ ②生成秘钥，连续三个回车 1ssh-keygen -t rsa -C &quot;yourEmail@163.com&quot; ​ ③添加秘钥到ssh-agent 1ssh-add ~/.ssh/id_rsa ​ ④打开目录C:\Users\Admin\ .ssh\id_rsa.pub文件，全选赋值秘钥，拷贝到github新增的SSH秘钥中： ​ ⑤到Github.com你的用户圆头像右上角，单击后出现列表，点击Settings（设置），找到如图选项： 注意：添加SSH秘钥时，title为空，否则添加秘钥失败。直接拷贝id_rsa.pub文件里的秘钥到key即可 ​ ⑥测试是否已经连接上，这里地址不需要更改，直接拷贝： 1ssh -T git@github.com 成功如图所示【文件目录在Hexo根目录】： ​ ​ 3、配置根目录的_config.yml文件,打开该文件按Ctrl+f搜索deploy，粘贴代码： /这里地址为你的github服务器的HTTPS地址/ 1234567deploy: type: git repository: https://github.com/username/UserName.github.io.git branch: master ​ 4、新建一遍文章，文章将会以md格式存放到source\ _posts目录下，测试是否成功【如图所示】： 1hexo new post &quot;title name&quot; ​ 查看根目录下的source\ _posts文件夹下已经创建好title-name.md，使用MarDown打开进行编写内容 ​ 5、编辑好之后执行生成、部署命令，该命令代替了git命令的push提交 【建议在本地通过hexo s -debug命令查看修改/更新的内容，确认配置完成再执行hexo d -g提交至github服务器端】： 第一种方式： 11、 hexo g //生成 12、 hexo d //部署 第二种方式： 1hexo d -g ​ 6、成功后访问https://yourgithub.github.io/ 在服务器提交的过程中如果有出现很多warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX 警告 解决办法： 1git config --global core.autocrlf false 配置主题Next提示：在配置过程中有两个配置文件 ​ ① 位于Hexo根目录下的_config.yml【称为Hexo站点配置文件】 ​ ②位于Next主题下的_config.yml配置文件【称为Next主题配置文件】 ​ ​ 1、在Hexo目录下的themes文件夹创建next文件夹用于存放Next主题，通过git Bash执行以下命令下载Next配置主题 1git clone https://github.com/iissnan/hexo-theme-next themes/next ​ 2、下载完成后，启用主题。打开Hexo的站点配置文件_config.yml，找到theme字段改为： 1theme: next ​ 3、到这里主题已经安装完成了，下一步则要开始验证是否成功安装，首先执行以下命令将Hexo的缓存清一下： 1hexo clean ​ 4、通过-debug进入调试模式，启动Hexo本地站点，通过https://localhost:4000访问主题。 切记，进入Hexo服务器不要直接点右上角强制退出 1hexo s -debug ​ 5、主题设定，进入主题Next的配置文件，打开搜索关键字Scheme，下面有四个主题布局，可以根据自己喜好来定制，直接把前面的#号去掉并把默认主题加上#号即可，想要在网页查看的话可以通过以下命令在本地调试： 1、先清除一下缓存 1hexo clean 2、开启本地Hexo服务器的调试 1hexo s -debug 添加sitemap和feed插件​ 1、在Hexo根目录输入以下命令： 1npm install hexo-generator-feed -save 1npm install hexo-generator-sitemap -save ​ 2、修改Hexo站点配置文件_config.yml,在 #Extensions下面增加以下内容 123456789101112# ExtensionsPlugins:- hexo-generator-feed- hexo-generator-sitemap#Feed Atomfeed: type: atom path: atom.xml limit: 20#sitemapsitemap: path: sitemap.xml ​ ​ 3、执行部署github服务端命令： 1hexo d -g 成功提交后就可以访问自己的个人博客啦！ https://username.github.io/ 修改Next主题的样式​ ​ 推介大家参考这个链接，里面有很多Next主题的功能配置教程 1https://segmentfault.com/a/1190000009544924]]></content>
      <categories>
        <category>Hexo搭建个人博客</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
</search>
