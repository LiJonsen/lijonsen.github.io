<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Hexo+next+github搭建个人博客]]></title>
    <url>%2F2017%2F10%2F15%2F%E4%BD%BF%E7%94%A8Hexo-next-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[文章主要内容：使用Hexo + Next + github 搭建一个属于自己的个人博客 环境搭建需求​ ①拥有自己的github个人网页【例如我的：https://lijonsen.github.io】 ​ ②搭建Hexo环境【前提是已经安装node.js和npm】 ​ ③在Hexo基础上配置Next主题 ​ ④如果需要个人域名，则在万网中购买一个，也可以使用github给用户配的https://username.github.io/ ​ ⑤如果安装了git，也可以通过git Bash操作命令行 在npm中安装Hexo环境​ ①打开cmd命令行下载Hexo： 1npm install hexo-cli -g ​ ②可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入 1npm install hexo --save //save前面两个杠 ​ ③完成之后重新打开cmd命令，查看Hexo是否安装成功 1hexo -v Hexo的相关配置以下操作模拟在本地的E:\myBlog文件夹下操作 1、在E盘创建一个文件夹myBlog，在该文件夹初始化Hexo，打开git Bash或该目录的cmd。 输入以下命令： 1hexo init 1hexo install ​ 2、首体验Hexo，继续输入命令： 1hexo g 3、再次输入以下命令，成功后通过 http://0.0.0.0:4000 访问Hexo生成的页面【注意事项：进去之后不能点击右上角× 直接退出，需要通过Ctrl + c 退出Hexo服务器才可以操作其他命令】 1hexo s 1成功提示：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. ​ 将Hexo与Github连接起来​ 注：下面会在Hexo环境下安装各种各样的小插件，插件的所有安装记录可在根目录package.json文件中查看，在配置【字段：值】得时候，字段后面必须有一个空格 ​ 1、安装拓展插件 1npm install hexo-deployer-git --save ​ 2、配置秘钥，将秘钥放置Github中的SSH秘钥存储中 ​ ①将路径切换到以下目录 1cd ~/.ssh ​ ②生成秘钥，连续三个回车 1ssh-keygen -t rsa -C &quot;yourEmail@163.com&quot; ​ ③添加秘钥到ssh-agent 1ssh-add ~/.ssh/id_rsa ​ ④打开目录C:\Users\Admin\ .ssh\id_rsa.pub文件，全选赋值秘钥，拷贝到github新增的SSH秘钥中： ​ ⑤到Github.com你的用户圆头像右上角，单击后出现列表，点击Settings（设置），找到如图选项： 注意：添加SSH秘钥时，title为空，否则添加秘钥失败。直接拷贝id_rsa.pub文件里的秘钥到key即可 ​ ⑥测试是否已经连接上，这里地址不需要更改，直接拷贝： 1ssh -T git@github.com 成功如图所示【文件目录在Hexo根目录】： ​ ​ 3、配置根目录的_config.yml文件,打开该文件按Ctrl+f搜索deploy，粘贴代码： /这里地址为你的github服务器的HTTPS地址/ 1234567deploy: type: git repository: https://github.com/username/UserName.github.io.git branch: master ​ 4、新建一遍文章，文章将会以md格式存放到source\ _posts目录下，测试是否成功【如图所示】： 1hexo new post &quot;title name&quot; ​ 查看根目录下的source\ _posts文件夹下已经创建好title-name.md，使用MarDown打开进行编写内容 ​ 5、编辑好之后执行生成、部署命令，该命令代替了git命令的push提交 【建议在本地通过hexo s -debug命令查看修改/更新的内容，确认配置完成再执行hexo d -g提交至github服务器端】： 第一种方式： 11、 hexo g //生成 12、 hexo d //部署 第二种方式： 1hexo d -g ​ 6、成功后访问https://yourgithub.github.io/ 在服务器提交的过程中如果有出现很多warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX 警告 解决办法： 1git config --global core.autocrlf false 配置主题Next提示：在配置过程中有两个配置文件 ​ ① 位于Hexo根目录下的_config.yml【称为Hexo站点配置文件】 ​ ②位于Next主题下的_config.yml配置文件【称为Next主题配置文件】 ​ ​ 1、在Hexo目录下的themes文件夹创建next文件夹用于存放Next主题，通过git Bash执行以下命令下载Next配置主题 1git clone https://github.com/iissnan/hexo-theme-next themes/next ​ 2、下载完成后，启用主题。打开Hexo的站点配置文件_config.yml，找到theme字段改为： 1theme: next ​ 3、到这里主题已经安装完成了，下一步则要开始验证是否成功安装，首先执行以下命令将Hexo的缓存清一下： 1hexo clean ​ 4、通过-debug进入调试模式，启动Hexo本地站点，通过https://localhost:4000访问主题。 切记，进入Hexo服务器不要直接点右上角强制退出 1hexo s -debug ​ 5、主题设定，进入主题Next的配置文件，打开搜索关键字Scheme，下面有四个主题布局，可以根据自己喜好来定制，直接把前面的#号去掉并把默认主题加上#号即可，想要在网页查看的话可以通过以下命令在本地调试： 1、先清除一下缓存 1hexo clean 2、开启本地Hexo服务器的调试 1hexo s -debug 添加sitemap和feed插件​ 1、在Hexo根目录输入以下命令： 1npm install hexo-generator-feed -save 1npm install hexo-generator-sitemap -save ​ 2、修改Hexo站点配置文件_config.yml,在 #Extensions下面增加以下内容 123456789101112# ExtensionsPlugins:- hexo-generator-feed- hexo-generator-sitemap#Feed Atomfeed: type: atom path: atom.xml limit: 20#sitemapsitemap: path: sitemap.xml ​ ​ 3、执行部署github服务端命令： 1hexo d -g 成功提交后就可以访问自己的个人博客啦！ https://username.github.io/ 修改Next主题的样式​ ​ 推介大家参考这个链接，里面有很多Next主题的功能配置教程 1https://segmentfault.com/a/1190000009544924]]></content>
  </entry>
  <entry>
    <title><![CDATA[定位深圳]]></title>
    <url>%2F2017%2F10%2F14%2F%E5%AE%9A%E4%BD%8D%E6%B7%B1%E5%9C%B3%2F</url>
    <content type="text"><![CDATA[一、会话技术Cookie和Session =》http协议 ​ 1、Cookie是客户端数，服务器把每个用户的数据以cookie的形式写给用户各自的游览器。当用户使用游览器再去访问服务器中的web资源时，就会带着各自的数据去，这样web资源处理的就是用户各自的数据了 ​ 2、作用： ​ （1）保存上次登录时间等信息 ​ （2）保存用户名、密码、在一定时间不用重新登录 ​ （3）记录用户访问网站的喜好 ​ （4）网站的个性化，比如定制网站的服务，内容 ​ ​ 3、cookie基本使用 ​ （1）setCookie(“name”,”jiaosen”,”3600”); ​ 说明：参数一和参数二是一个键值对 ​ 参数一：Cookie的键 ​ 参数二：Cookie的值 ​ 参数二：Cookie在客户端保存的时间【按秒计算】 ​ 4、详细说明： ​ （1）当游览器访问 cookie.php页面的时候，我们的服务器就会以一种特定的形式会送http响应，当游览器获取到信息后，就会保存该cookie到本机特定文件里 ​ （2）如果没有事件【参数三】，cookie不会保存到客户端，当游览器的会话结束，我们的cookie就会失效 ​ （3）cookie只能保存字符串 ​ （4）如果重新访问创建cookie的那个页面，相当于把cookie的生命周期刷新了 ​ （5）cookie也可以保存中文，默认对中文进行urldecode编码 ​ （6）可以有多个cookie值，可以给不同的键值对，设置不同的有效时间 ​ （7）客户端cookie值始终针对一个用户而言，与其他的用户的访问cookie值无关 ​ （8）方案1：check_add.php头部：&lt;?php date_default_timezone_set(“PRC”); ?&gt; 设置默认时区为北京时间。。解决当前页面。 方案2：在php.ini中设置date.timezone的值为PRC，设置好以后的为：date.timezone=PRC，同时取消这一行代码的注释，即去掉前面的分号就可以了。 ​ （9）如果setcookie()没有写参数三，那么这个cookie值当游览器关闭的时候清除，并且不会存储在cookies会话存储文件里 ​ 5、如何更新Cookie信息 ​ 语法：setCookie(); ​ 6、删除Cookie信息 ​ （1）指定删除 ​ //删除的时间是负数，只要是小于当前设置的时间就可以 ​ setCookie(“key”,””,time()-200); ​ setCookie(“name”,””,time()-200); ​ （2）全部删除 删除所有cookie值 foreach($_COOKIE as $key=&gt;$val){ ​ setCookie($key,””,time()-200); } ​ 6、cookie弊端 ​ ①不安全，因为cookie是以明文的方式传输的 ​ ②只能传输小型数据 ​ ③在网络传数据带宽消耗的问题 二、session技术 ​ 1、session默认保存在C:/windows/temp文件目录下 ​ 2、设置session: ​ ① 初始化session_start(); 设置$_SESSION[‘name’]=”jonsen”; ​ ②保存的格式name|s:6:”jonsen”; 键–s数据类型–6数据大小–值 ​ ③注意：key【键名不能重复】 ​ 3、获取session数据 ​ ① 初始化session_start(); 设置$name = $_SESSION[‘name’]; ​ ②session文件中可以保存所有的数据类型【double,integer,bool,array,object】 ​ ③如果取出对象，则需要先声明一下类的定义信息，如果是引入声明信息文件，则require_once在session_start(); 之前声明 ​ 4、更新session数据 ​ ① session_start(); ​ $_SESSION[‘name’]=”黎教森”; echo &quot;更新成功&quot;; ​ 5、删除session数据 ​ ①删除某一个session数据 ​ session_start();//初始化session ​ // unset()方法，删除/释放某一个变量 ​ unset($_SESSION[‘name’]); ​ ②删除所有session数据 ​ //这样会把当前这个游览器对应的session文件删除 session_destroy(); ​ ③每个网站都有一个安全退出，如果没有按安全退出则当前用户的session数据会保留在客户端等待垃圾回收机制回收【php.ini文件下修改session.gc_maxlifetime = 1440 】，这样有可能会收到攻击。 ​ ④如果没有手动删除，那么系统是怎么维护安全删除的 ​ ⑤整个session文件是依赖于session_start();这条语句创建起来为这次会话服务，但是创建出来后默认是没有数据，为空的。 ​ ⑥session_start();会去判断其他文件有没有创建会话，所有其他文件写有start并不会重新创建多一个文件会话 ​ ⑦session文件当用户关闭游览器重新打开的时候会重新创建一个新的session文件服务这新一轮的会话 ​ ​ 6、session的细节讨论 ​ ①session数据默认储存在时间为1440s(24分钟)，从~/php.ini中session.gc_maxlifetime = 1440 中配置修改 ​ ②session文件存放的路径是可以修改的，在php.ini中session_save_path = “/tmp”,修改php.ini文件都要重启phpStudy才能生效 ​ 总结：cookie和session的主要区别 ​ ① Cookie是把用户的数据写给用户的游览器 ​ ②Session技术把用户的数据写到用户独占的$_SESSION中，存在服务器的某个路径的文件中 ​ ③在使用$_SESSION前要保证session被初始化，具体方法有两种 ​ 1、先调用session_start(); ​ 2、配置php.ini文件下的session.auto_start=1（不推介，这样会影响该效率，因为每个文件都创建一个session会消耗内存） ​ ④当用户访问session文件创建会话的时候会自动生成一个Set-Cookie返回给游览器，蓝色高亮的字跟session文件保存目录下对应文件名，所以每当创建一次会话是session的文件名是对应这个Set-Cookie的名字来找到它的 ​ 注意：当用户禁用cookie后，服务器每次session_start()都会创建一个全新的session文件，后果就是无法让多个页面php，去共享同一份session文件 请问？如果客户端禁用cookie怎样实现session技术共享多个页面？ 答： ​ （1）在每个超链接上添加一个PHPSISSIONID=sessionId;同时在每个页面加入 ​ if(isset($_GET[‘PHPSESSION’])){ ​ session_id($_GET[‘PHPSESSION’]); ​ ​ } ​ （2）使用常亮SID ​ （3）直接配置php.ini文件的 session.use_trans_sid =0设为1（在href–action—header会自动加SID，打单室js的跳转不会自动加） session技术的实际运用： ​ 1、验证码 ​ ①防止登录时，恶意攻击 ​ ②防止灌水 ​ ③如果没有验证码防护，则客户端可以通过for循环无限循环测试出用户名和密码，数据库也会被无限次请求 在php.ini文件中关于Cookie和Session的配置 ​ ① session的名字可以通过session.name() 来获取，可以在php.ini配置文件中修改 ​ ​ ②三个一组： session.gc_maxlifetime=1440//默认最大生命周期 ​ session.gc_probability=1 ​ session.gc_divisor=1000 ​ 说明：上面三个配置共同来确定session的垃圾回收机制，gc_probability=1 和gc_divisor=1000的含义就是有1000份之一调用垃圾回收机制，也就是说，如果有一千个人访问该网页，那么一定会调用一次垃圾回收机制 ​ ③自定义会话处理器 ​ 问题：为什么session文件打头是sess_*,能不能自己定义文件名？ ​ 问题：能不能把session信息高效的保存到memcache【缓存】中 ​ 说明：可以通过session_set_save_handler操作和设置自定义会话处理，并且需要在php.ini中配置session.save_handler=[files\user] ​ 总结：session数据可以存放的位置 ​ ①文件 ​ ②数据库【不推荐】 ​ ③内存（memcache） ​ ④网络文件nfs技术 //把session存放到网络系统 session和cookie的对比 ​ ①存在的位置。cookie保存在客户端，session保存在服务器的文件系统/memcache/数据库/网络文件nfs ​ ②安全性。比较而言cookie的安全性比session要弱 ​ ③网络传输量。cookie通过网络在客户端与服务器端传输，而session保存在服务器端，不需要传输 ​ ④生命周期（20分钟为例） ​ （1）cookie的生命周期是累积的，从创建时就开始计时，20分钟后cookie生命周期结束，cookie无效 ​ （2）session的生命周期是间隔的，从创建时，开始计时如在20分钟，没有访问过session,那么session信息无效，如果在20分钟内，比如第19分钟时访问过session，那么它的生命周期将重新开始计算]]></content>
  </entry>
</search>
